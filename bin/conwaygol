#!/bin/sh

set -Cu

LANG=C

pname="$(basename "$0")"
stime="$(date +%Y%m%d%H%M%S)"
tmp="/tmp/$pname.$stime.$$"

trap 'rm -f $tmp-*' EXIT

######################################################################

pattern=${1:-"-"}

step="${2:-"-1"}"

X=${3:-"$(tput cols)"}
Y=${4:-"$(tput lines)"}

######################################################################

CONV()	{
    tr '012345678' '_'		|
	tr '9' 'X'
}

newpage=""

######################################################################

# Initialize
cat "$pattern"			|
    tr 'A-Za-z' '9'		|
    tr -c '9\n' '0'		|
    txt2xyv - 0			|
    tee "$tmp-cell_xyv.STATUS"	|
    xyv2txt - "0" "$X" "$Y"	|
    #
    CONV

[ "$step" -eq 0 ]	&&
    exit 0

echo "$newpage"

yes ""			|
    if [ 0 -lt "$step" ] ; then
	head -n "$step"
    else
	cat
    fi			|
while read ; do
    awk	'{	print $1 - 1, $2 - 1, ($3=="9"), 0
		print $1    , $2 - 1, ($3=="9"), 0
		print $1 + 1, $2 - 1, ($3=="9"), 0

		print $1 - 1, $2    , ($3=="9"), 0
		print $1    , $2    , ($3=="9"), $3
		print $1 + 1, $2    , ($3=="9"), 0

		print $1 - 1, $2 + 1, ($3=="9"), 0
		print $1    , $2 + 1, ($3=="9"), 0
		print $1 + 1, $2 + 1, ($3=="9"), 0
	}' "$tmp-cell_xyv.STATUS"	|
	awk -v X="$X" -v Y="$Y"	'
	(X >= $1 && $1 > 0) && (Y >= $2 && $2 > 0)
	'				|
	sort -k2n -k1n			|
	#=> sm2 key=1/2 val=3/4		|
	awk	-v sum3=0 -v sum4=0 '
	key != $1 " " $2	{
		print key, sum3, sum4

		key = $1 " " $2; sum3 = $3; sum4 = $4;
		next	}
	{	sum3 = sum3 + $3; sum4 = sum4 + $4;	}
	END	{
		print $1, $2, sum3, sum4
	}'				|
	sed '1d'			|
	#
	## calculate next state for each cell
	awk '
	($4 != "9" && $3 == "3")	{
		# RULE1 : reproduction
		print $1, $2, 9;	next;	}
	($4 != "9" && $3 != "3")	{
		print $1, $2, $4 - 1;	next;	}

	($4 == "9" && ($3 == "3" || $3 == "4"))	{
		# RULE2 : sustain
		print $1, $2, 9;	next;	}
	($4 == "9" && $3 <= "2")	{
		# RULE3 : underpopulation
		print $1, $2, $4 - 1;	next;	}
	($4 == "9" && $3 >= "5")	{
		# RULE3 : underpopulation
		print $1, $2, $4 - 1;	next;	}
	{	print "'"$pname.$stime.$$ ERROR unreachable code section."'"	> "/dev/stderr";
		exit 1;	}'		|
	awk	'$3 > 0'		|
	#
	tee "$tmp-cell_xyv.STATUS.next"	|
	xyv2txt - "0" "$X" "$Y"		|
	#
	CONV

    cmp "$tmp-cell_xyv.STATUS.next" "$tmp-cell_xyv.STATUS"	> /dev/null	&&
	break
    
    echo "$newpage"

    mv "$tmp-cell_xyv.STATUS.next" "$tmp-cell_xyv.STATUS"
done

######################################################################
exit 0
